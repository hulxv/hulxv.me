---
import { getCollection } from "astro:content";
import { statSync } from "fs";
import { join } from "path";
import BaseLayout from "@/layouts/BaseLayout.astro";
import type { CollectionEntry } from "astro:content";

export async function getStaticPaths() {
	const posts = await getCollection("blog");
	return posts.map((post) => ({
		params: { slug: post.slug },
		props: { post },
	}));
}

type Props = {
	post: CollectionEntry<"blog">;
};

const { post } = Astro.props;
const { title, description, image, date, tags } = post.data;

// Get file modification time
const filePath = join(process.cwd(), "src", "content", "blog", `${post.slug}.mdx`);
let modifiedDate: string | undefined;

try {
	const stats = statSync(filePath);
	modifiedDate = stats.mtime.toISOString();
} catch (error) {
	console.warn(`Could not get modification time for ${filePath}:`, error);
}

const { Content } = await post.render();
---

<BaseLayout 
	title={title} 
	description={description} 
	image={image} 
	pageType="article"
	publishDate={typeof date === 'string' ? new Date(date).toISOString() : date}
	modifiedDate={modifiedDate}
	tags={tags}
>
	<article class="prose max-w-3xl mx-auto">
		<header class="mb-8">
			<h1 class="text-4xl font-bold mb-4">{title}</h1>
			{description && <p class="text-lg text-gray-600 mb-4">{description}</p>}
			<time class="text-sm text-gray-500" datetime={date}>{date}</time>
		</header>
		
		{image && (
			<div class="mb-8">
				<img 
					width="1200" 
					height="630" 
					src={image.src} 
					alt={image.alt || title} 
					class="w-full h-auto rounded-lg shadow-lg"
				/>
			</div>
		)}
		
		<div class="prose lg:prose-xl">
			<Content />
		</div>
	</article>
</BaseLayout>
